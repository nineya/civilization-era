<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    nineya java checkstyle
 -->

<module name="Checker">

  <property name="charset" value="UTF-8" />
  <property name="severity" value="warning" />

  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
  </module>

  <!-- 排除文件 -->
  <module name="BeforeExecutionExclusionFileFilter">
    <property name="fileNamePattern" value="module\-info\.java$"/>
  </module>
  
  <!--　检查源码文件的长度 max: 定义一个文件所能容许的行数 --> 
  <module name="FileLength">  
    <property name="max" value="2000"/>  
  </module>

  <!-- 每个java文件一个语法树 -->
  <module name="TreeWalker">
    <!-- 排除代码块 -->
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CSOFF"/>
      <property name="onCommentFormat" value="CSON"/>
    </module>
    <!-- import检查 -->
    <!-- 检查是否从非法的包中导入了类 -->
    <module name="IllegalImport" />
    <!-- 检查是否导入了多余的包 -->
    <module name="RedundantImport" />
    <!-- 没用的import检查，比如：1.没有被用到2.重复的3.import java.lang的4.import 与该类在同一个package的 -->
    <module name="UnusedImports" />

    <!-- 注释检查 -->
    <module name="JavadocMethod">
      <property name="scope" value="public"/>
      <property name="allowMissingParamTags" value="true"/>
      <property name="allowMissingThrowsTags" value="true"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="allowThrowsTagsForSubclasses" value="true"/>
      <!--允许get set 方法没有注释 -->
      <property name="allowMissingPropertyJavadoc" value="true" />
      <property name="ignoreMethodNamesRegex" value="main"/>
      <property name="tokens" value="METHOD_DEF,ANNOTATION_FIELD_DEF"/>
      <message key="javadoc.missing" value="方法注释：缺少Javadoc注释。" />
    </module>

    <module name="Indentation">
      <property name="basicOffset" value="4"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="4"/>
      <property name="throwsIndent" value="4"/>
      <property name="lineWrappingIndentation" value="4"/>
      <property name="arrayInitIndent" value="4"/>
    </module>

    <!-- 命名检查 -->
    <!-- 局部的final变量，包括catch中的参数的检查 -->
    <module name="LocalFinalVariableName" />
    <!-- 局部的非final型的变量，包括catch中的参数的检查 -->
    <module name="LocalVariableName" />
    <!-- 包名的检查（只允许小写字母），默认^[a-z]+(\.[a-zA-Z_][a-zA-Z_0-9_]*)*$ -->
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
      <message key="name.invalidPattern" value="包名 ''{0}'' 要符合 ''{1}''格式." />
    </module>
    <!-- 仅仅是static型的变量（不包括static final型）的检查 -->
    <module name="StaticVariableName" />
    <!-- Class或Interface名检查，默认^[A-Z][a-zA-Z0-9]*$ -->
    <module name="TypeName">
      <property name="severity" value="warning" />
      <message key="name.invalidPattern" value="名称 ''{0}'' 要符合 ''{1}''格式." />
    </module>
    <!-- 非static型变量的检查 -->
    <module name="MemberName" />
    <!-- 方法名的检查 -->
    <module name="MethodName">
      <property name="format" value="^[a-zA-Z](_?[a-zA-Z0-9]+)*$"/>
    </module>
    <!-- 方法的参数名 -->
    <module name="ParameterName " />
    <!-- 常量名的检查（只允许大写），默认^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
    <module name="ConstantName" />

    <!-- 定义检查 -->
    <!-- 检查数组类型定义的样式 -->
    <module name="ArrayTypeStyle" />
    <!-- 检查long型定义是否有大写的“L” -->
    <module name="UpperEll" />
	
	<!-- A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. To check for other patterns in Java comments, set property format.
       检查是否存在TODO（待处理） TODO是javaIDE自动生成的。一般代码写完后要去掉。
    -->
    <module name="TodoComment"/>

    <!-- 长度检查 -->
    <!-- 每行不超过120个字符 -->
    <module name="LineLength">
      <property name="max" value="120" />
    </module>

    <!-- 空格检查 -->
    <!-- 方法名后跟左圆括号"(" -->
    <module name="MethodParamPad" />
    <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
    <module name="TypecastParenPad" />
    <!-- 检查在某个特定关键字之后应保留空格 -->
    <module name="NoWhitespaceAfter" />
    <!-- 检查在某个特定关键字之前应保留空格 -->
    <module name="NoWhitespaceBefore" />
    <!-- 操作符换行策略检查 -->
    <module name="OperatorWrap" />
    <!-- 圆括号空白 -->
    <module name="ParenPad" />
    <!-- 检查分隔符是否在空白之后 -->
    <module name="WhitespaceAfter" />
    <!-- 检查分隔符周围是否有空白 -->
    <module name="WhitespaceAround">
      <!-- 允许空的构造函器 -->
      <property name="allowEmptyConstructors" value="true"/>
      <!-- 允许空的循环体 -->
      <property name="allowEmptyLoops" value="true"/>
      <!-- 允许空的catch块 -->
      <property name="allowEmptyCatches" value="true"/>
    </module>

    <!-- 修饰符检查 -->
    <!-- 检查修饰符的顺序是否遵照java语言规范，默认public、protected、private、abstract、static、final、transient、volatile、synchronized、native、strictfp -->
    <module name="ModifierOrder" />
    <!-- 检查接口和annotation中是否有多余修饰符，如接口方法不必使用public -->
    <module name="RedundantModifier" />

    <!-- 代码块检查 -->
    <!-- 检查是否有嵌套代码块 -->
    <module name="AvoidNestedBlocks" />
    <!-- 检查是否有空代码块 -->
    <module name="EmptyBlock" />
    <!-- 检查左大括号位置 -->
    <module name="LeftCurly" />
    <!-- 检查代码块是否缺失{} -->
    <module name="NeedBraces" />
    <!-- 检查右大括号位置 -->
    <module name="RightCurly" />

    <!-- 代码检查 -->
    <!-- 检查空的代码段 -->
    <module name="EmptyStatement" />
    <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
    <module name="EqualsHashCode" />
    <!-- 检查局部变量或参数是否隐藏了类中的变量 -->
    <module name="HiddenField">
      <property name="tokens" value="VARIABLE_DEF" />
    </module>
    <!-- 检查是否使用工厂方法实例化 -->
    <module name="IllegalInstantiation" />
    <!-- 检查子表达式中是否有赋值操作 -->
    <module name="InnerAssignment" />
    <!-- 检查是否有"魔术"数字 -->
    <module name="MagicNumber">
      <property name="ignoreNumbers" value="0, 1, -1" />
      <property name="ignoreAnnotation" value="true" />
      <property name="ignoreHashCodeMethod" value="true" />
      <property name="ignoreFieldDeclaration" value="true" />
    </module>
    <!-- 检查switch语句是否有default -->
    <module name="MissingSwitchDefault" />
    <!-- 检查是否有过度复杂的布尔表达式 -->
    <module name="SimplifyBooleanExpression" />
    <!-- 检查是否有过于复杂的布尔返回代码段 -->
    <module name="SimplifyBooleanReturn" />

    <!-- 类设计检查 -->
    <!-- 检查类是否为扩展设计l -->
    <!-- 检查只有private构造函数的类是否声明为final -->
    <module name="FinalClass" />
    <!-- 检查接口是否仅定义类型 -->
    <module name="InterfaceIsType" />
    <!-- 检查类成员的可见度 检查类成员的可见性。只有static final 成员是public的 除非在本检查的protectedAllowed和packagedAllowed属性中进行了设置 -->
    <module name="VisibilityModifier">
      <property name="packageAllowed" value="true" />
      <property name="protectedAllowed" value="true" />
    </module>

    <!-- 语法 -->
    <!-- String的比较不能用!= 和 == -->
    <module name="StringLiteralEquality" />

  </module>
</module>
